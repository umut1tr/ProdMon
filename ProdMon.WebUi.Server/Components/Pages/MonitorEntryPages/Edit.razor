@page "/monitorentries/edit"
@using Microsoft.EntityFrameworkCore
@using ProdMon.Domain.Models
@inject IDbContextFactory<ProdMon.Infrastructure.Data.ProdMonDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>MonitorEntry</h2>
<hr />
@if (MonitorEntry is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="MonitorEntry" OnValidSubmit="UpdateMonitorEntry" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="MonitorEntry.Dmc" value="@MonitorEntry.Dmc" />
                <div class="mb-3">
                    <label for="timestamp" class="form-label">Zeitstempel:</label>
                    <InputDate id="timestamp" @bind-Value="MonitorEntry.Timestamp" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => MonitorEntry.Timestamp" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Beschreibung:</label>
                    <InputText id="description" @bind-Value="MonitorEntry.Description" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => MonitorEntry.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="quality" class="form-label">Qualität:</label>
                    <InputText id="quality" @bind-Value="MonitorEntry.Quality" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => MonitorEntry.Quality" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="checkpointid" class="form-label">CheckPointId:</label>
                    <InputNumber id="checkpointid" @bind-Value="MonitorEntry.CheckPointId" class="form-control" />
                    <ValidationMessage For="() => MonitorEntry.CheckPointId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/monitorentries">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private string Dmc { get; set; }

    [SupplyParameterFromForm]
    private MonitorEntry? MonitorEntry { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        MonitorEntry ??= await context.MonitorEntries.FirstOrDefaultAsync(m => m.Dmc == Dmc);

        if (MonitorEntry is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateMonitorEntry()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(MonitorEntry!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!MonitorEntryExists(MonitorEntry!.Dmc))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/monitorentries");
    }

    private bool MonitorEntryExists(string dmc)
    {
        using var context = DbFactory.CreateDbContext();
        return context.MonitorEntries.Any(e => e.Dmc == dmc);
    }
}
