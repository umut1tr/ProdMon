@page "/new"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.Extensions.Logging
@using ProdMon.Application.Interfaces
@using ProdMon.Application.Services
@using ProdMon.Domain.Models
@using ProdMon.Infrastructure.Data
@implements IAsyncDisposable
@inject IFileWatcherService FileWatcherService
@inject IDbContextFactory<ProdMonDbContext> DbFactory
@inject ILogger<MonitorEntry> Logger
@rendermode InteractiveServer

<PageTitle>Index</PageTitle>

<h1>Index</h1>
<h1>Aktuelle Monitor-Einträge</h1>

<p>
    <a href="monitorentries/create">Create New</a>
</p>

@if (monitorEntries.Any())
{
    <QuickGrid Class="table" Items="context.MonitorEntries">
        <PropertyColumn Property="monitorentry => monitorentry.Dmc" Title="DataMatrix Code" />
        <TemplateColumn Context="monitorentry" Title="Zeitstempel">
            @monitorentry.Timestamp.ToString("dd/MM/yyyy HH:mm:ss")
        </TemplateColumn>
        <PropertyColumn Property="monitorentry => monitorentry.Description" Title="Beschreibung" />
        <PropertyColumn Property="monitorentry => monitorentry.Quality" Title="Qualitätsmerkmal" />
        <PropertyColumn Property="monitorentry => monitorentry.CheckPointId" Title="Checkpoint ID" />
        <TemplateColumn Context="monitorentry">
            <a href="@($"monitorentries/edit?dmc={monitorentry.Dmc}")">Edit</a> |
            <a href="@($"monitorentries/details?dmc={monitorentry.Dmc}")">Details</a> |
            <a href="@($"monitorentries/delete?dmc={monitorentry.Dmc}")">Delete</a>
        </TemplateColumn>
    </QuickGrid>

    @foreach (var entry in monitorEntries)
    {
        <p>@entry.Dmc</p>
    }
}
else
{
    <p>Keine Einträge gefunden.</p>
}

@code {
    private List<MonitorEntry> monitorEntries = new();
    private ProdMonDbContext context = default!;
    private System.Timers.Timer? timer;

    protected override async Task OnInitializedAsync()
    {
        context = await DbFactory.CreateDbContextAsync();
        await LoadEntriesAsync();

        // Initialize and start the timer
        timer = new System.Timers.Timer(5000); // 5 seconds
        timer.Elapsed += async (sender, e) => await TimerElapsed();
        timer.AutoReset = true;
        timer.Enabled = true;

        Logger.LogInformation("Timer initialized and started");
    }

    private async Task TimerElapsed()
    {
        await InvokeAsync(async () =>
        {
            await LoadEntriesAsync();
            StateHasChanged();  // Ensure the UI is updated
            Logger.LogInformation("Timer elapsed, data reloaded");
        });
    }

    private async Task LoadEntriesAsync()
    {
        monitorEntries = await context.MonitorEntries.ToListAsync();
        Logger.LogInformation("LoadEntriesAsync has been called");
    }

    public async ValueTask DisposeAsync()
    {
        Logger.LogInformation("DisposeAsync has been called");

        if (timer != null)
        {
            timer.Dispose();
        }

        await context.DisposeAsync();
    }
}
