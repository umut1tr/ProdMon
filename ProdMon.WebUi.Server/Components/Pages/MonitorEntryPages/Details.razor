@page "/monitorentries/details"
@using Microsoft.EntityFrameworkCore
@using ProdMon.Domain.Models
@inject IDbContextFactory<ProdMon.Infrastructure.Data.ProdMonDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>MonitorEntry</h2>
    <hr />
    @if (monitorentry is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Timestamp</dt>
            <dd class="col-sm-10">@monitorentry.Timestamp</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@monitorentry.Description</dd>
            <dt class="col-sm-2">Quality</dt>
            <dd class="col-sm-10">@monitorentry.Quality</dd>
            <dt class="col-sm-2">CheckPointId</dt>
            <dd class="col-sm-10">@monitorentry.CheckPointId</dd>
        </dl>
        <div>
            <a href="@($"/monitorentries/edit?dmc={monitorentry.Dmc}")">Edit</a> |
            <a href="@($"/monitorentries")">Back to List</a>
        </div>
    }
</div>

@code {
    private MonitorEntry? monitorentry;

    [SupplyParameterFromQuery]
    private string Dmc { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        monitorentry = await context.MonitorEntries.FirstOrDefaultAsync(m => m.Dmc == Dmc);

        if (monitorentry is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
