@page "/monitorentries"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.Extensions.Logging
@using ProdMon.Application.Interfaces
@using ProdMon.Application.Services
@using ProdMon.Domain.Models
@using ProdMon.Infrastructure.Data
@implements IAsyncDisposable
@inject IFileWatcherService FileWatcherService
@inject IDbContextFactory<ProdMonDbContext> DbFactory
@inject ILogger<MonitorEntry> Logger
@rendermode InteractiveServer

<PageTitle>Index</PageTitle>

<h1>Index</h1>
<h1>Aktuelle Monitor-Einträge</h1>

<p>
    <a href="monitorentries/create">Create New</a>
</p>

@if (monitorEntries.Any())
{
    <QuickGrid Items="monitorEntries.AsQueryable()">
        <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="monitorentry => monitorentry.Dmc" Title="DataMatrix Code" />
        <Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn Context="monitorentry" Title="Zeitstempel" Sortable="true">
            @monitorentry.Timestamp.ToString("dd/MM/yyyy HH:mm:ss")
        </Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn>
        <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="monitorentry => monitorentry.Description" Title="Beschreibung" />
        <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="monitorentry => monitorentry.Quality" Title="Qualitätsmerkmal" />
        <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="monitorentry => monitorentry.CheckPointId" Title="Checkpoint ID" />
        <Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn Context="monitorentry">
            <a href="@($"monitorentries/edit?dmc={monitorentry.Dmc}")">Edit</a> |
            <a href="@($"monitorentries/details?dmc={monitorentry.Dmc}")">Details</a> |
            <a href="@($"monitorentries/delete?dmc={monitorentry.Dmc}")">Delete</a>
        </Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn>
    </QuickGrid>    
}
else
{
    <p>Keine Einträge gefunden.</p>
}

@code {
    private List<MonitorEntry> monitorEntries = new();
    private ProdMonDbContext context = default!;

    protected override async Task OnInitializedAsync()
    {
        context = await DbFactory.CreateDbContextAsync();

        // Subscribe to the event
        FileWatcherService.EntryHasBeenApplied += HandleEntriesChanged;       

        // Load initial data
        await LoadEntriesAsync();
    }

    private async Task LoadEntriesAsync()
    {
        monitorEntries = await context.MonitorEntries.ToListAsync();        

        await InvokeAsync(StateHasChanged);  // Ensure the UI is updated
    }

    private async void HandleEntriesChanged()
    {
        
        // Load new data when the event is triggered
        await LoadEntriesAsync();
    }

    public async ValueTask DisposeAsync()    {
        
        // Unsubscribe from the event
        FileWatcherService.EntryHasBeenApplied -= HandleEntriesChanged;
        await context.DisposeAsync();
    }
}
