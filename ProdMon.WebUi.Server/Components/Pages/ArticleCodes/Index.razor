@page "/ArticleCodes/Index"
@using Microsoft.JSInterop
@using Application.Interfaces
@using ProdMon.Domain.Models
@inject IArticleCodeRepository ArticleCodeRepository
@inject NavigationManager Navigation

<h3>Application Codes</h3>

@if (ArticleCodes == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Article Number</th>
                <th>Article Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var article in ArticleCodes)
            {
                <tr>
                    <td>@article.ArticleNumber</td>
                    <td>@article.ArticleDescription</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditArticleCode(article.ArticleNumber)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => ConfirmDelete(article.ArticleNumber)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ArticleCode>? ArticleCodes;

    protected override async Task OnInitializedAsync()
    {
        ArticleCodes = (await ArticleCodeRepository.GetAllArticleCodesAsync()).ToList();
    }

    private void EditArticleCode(int id)
    {
        Navigation.NavigateTo($"/ArticleCodes/edit/{id}");
    }

    private async void ConfirmDelete(int id)
    {
        bool isConfirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete ArticleCode with ID {id}?");
        if (isConfirmed)
        {
            await ArticleCodeRepository.DeleteArticleCodeAsync(id);
            ArticleCodes = (await ArticleCodeRepository.GetAllArticleCodesAsync()).ToList(); // Refresh the list
            StateHasChanged(); // Notify Blazor to re-render
        }
    }

    [Inject]
    private IJSRuntime JsRuntime { get; set; }
}
