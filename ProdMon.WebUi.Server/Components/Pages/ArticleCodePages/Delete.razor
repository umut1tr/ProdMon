@page "/articlecodes/delete"
@using Microsoft.EntityFrameworkCore
@using ProdMon.Domain.Models
@using ProdMon.Infrastructure.Data
@inject IDbContextFactory<ProdMonDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>ArticleCode</h2>
    <hr />
    @if (articlecode is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">ArticleDescription</dt>
            <dd class="col-sm-10">@articlecode.ArticleDescription</dd>
        </dl>
        <EditForm method="post" Model="articlecode" OnValidSubmit="DeleteArticleCode" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(articlecode is null)">Delete</button> |
            <a href="/articlecodes">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private ArticleCode? articlecode;

    [SupplyParameterFromQuery]
    private string ArticleNumber { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        articlecode = await context.ArticleCodes.FirstOrDefaultAsync(m => m.ArticleNumber == ArticleNumber);

        if (articlecode is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteArticleCode()
    {
                     
        try
        {
            // ensure proper disposing of dbcontext
            using (var context = DbFactory.CreateDbContext())
            {
                context.ArticleCodes.Remove(articlecode!);
                await context.SaveChangesAsync();
            }

            NavigationManager.NavigateTo("/articlecodes");
        }
        catch (Exception ex)
        {

            NavigationManager.NavigateTo("/articlecodes");
        }
    }
}
